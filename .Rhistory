for (i in 1:(Rounds*ATAA)){
die <- sample(1:20, 1)
if(die == 20){
Rolls[i] <- "Crit"
}else if(die == 1){
Rolls[i] <- FALSE
}
else{
Rolls[i] <- sum(sample(1:20, 1), ToHit_Bonus) >= AC
}
}
return(Rolls)
}
DamageOnTurn <- function(Attacks, ddie, DBonus){
Damages <- c()
for(i in 1:length(Attacks)){
if (Attacks[i] == "Crit"){
Damages[i] <- (sample(1:ddie, 1) * 2) + DBonus
}else if (Attacks[i]){
Damages[i] <- sample(1:ddie, 1) + DBonus
}else{
Damages[i] <- 0
}
}
return(sum(Damages))
}
Repetitions <- function(To_Validate, Label, repeats){
Temp <- c()
for(i in 1:repeats){
Temp[i] <- str2expression(text = To_Validate)
}
return(Temp)
}
Repetitions("DamageOnTurn(AttacksThatHitSimulation(6, 14, 5, 1), d10, 0)", "Level 3", 25)
To_Hit_Progression <- function(fighter = FALSE){
ProfBonus <- c(rep(2, 4), rep(3, 4), rep(4, 4), rep(5, 4), rep(6, 4))
if(fighter == FALSE){
AS <- c(rep(3, 3), rep(4, 4), rep(5, 13))
}else{
AS <- c(rep(3, 3), rep(4, 2), rep(5, 15))
}
return(AS + ProfBonus)
}
HP_Progression <- function(hitdie){
HP <- c(hitdie)
i <- 1
for (i in 1:19){
HP[i + 1] <- (hitdie * 0.5) + 1 + HP[i]
}
return(HP)
}
Expected_Damage <- function(ddie, nod = 1, samples = 50){
if(nod == 1){
return(rep(floor(ddie * 0.5), samples))
}else{
reps <- c()
for(i in 1:samples){
reps[i] <- sum(sample(1:ddie, nod, replace = TRUE))
}
return(reps)
}
}
Fighter_ToHit_Graph <- function(Archery  = FALSE){
Level <- seq(1, 20, 1)
Bonus <- To_Hit_Progression(fighter = TRUE)
if(Archery){
Bonus <- Bonus + 2
}
ToHitBonus <- data.frame(Level, Bonus)
return(ggplot(ToHitBonus, aes(x = Level, y = Bonus)) + geom_bar(stat = "identity", fill = "burlywood4") + geom_text(aes(label=Bonus), vjust=-0.3, size=3.5) + ggtitle("To-Hit Bonus Progression"))
}
Fighter_HP_Graph <- function(){
Level <- seq(1, 20, 1)
HP <- HP_Progression(10)
for(i in 1:20){
if(i <8){
HP[i] <- HP[i] + 3*i + (5 + i)
}else if(i < 12){
HP[i] <- HP[i] + 4*i + (5 + i)
}else{
HP[i] <- HP[i] + 5*i + (5 + i)
}
}
HP_Prog <- data.frame(Level, HP)
return(ggplot(HP_Prog, aes(x = Level, y = HP)) + geom_bar(stat = "identity", fill = "burlywood4") + geom_text(aes(label=HP), vjust=-0.3, size=3.5) + ggtitle("Fighter HP Progression"))
}
Fighter_HP_DataFrame <- function(){
Level <- seq(1, 20, 1)
HP <- HP_Progression(10)
for(i in 1:20){
if(i <8){
HP[i] <- HP[i] + 3*i + (5 + i)
}else if(i < 12){
HP[i] <- HP[i] + 4*i + (5 + i)
}else{
HP[i] <- HP[i] + 5*i + (5 + i)
}
}
HP_Prog <- data.frame(Level, HP)
}
AttacksThatHitSimulation <- function(ToHit_Bonus, AC, Rounds, ATAA){
Rolls <- c()
for (i in 1:(Rounds*ATAA)){
die <- sample(1:20, 1)
if(die == 20){
Rolls[i] <- "Crit"
}else if(die == 1){
Rolls[i] <- FALSE
}
else{
Rolls[i] <- sum(sample(1:20, 1), ToHit_Bonus) >= AC
}
}
return(Rolls)
}
DamageOnTurn <- function(Attacks, ddie, DBonus){
Damages <- c()
for(i in 1:length(Attacks)){
if (Attacks[i] == "Crit"){
Damages[i] <- (sample(1:ddie, 1) * 2) + DBonus
}else if (Attacks[i]){
Damages[i] <- sample(1:ddie, 1) + DBonus
}else{
Damages[i] <- 0
}
}
return(sum(Damages))
}
Repetitions <- function(To_Validate, Label, repeats){
Temp <- c()
for(i in 1:repeats){
Temp[i] <- parse(text = To_Validate)
}
return(Temp)
}
Repetitions("DamageOnTurn(AttacksThatHitSimulation(6, 14, 5, 1), d10, 0)", "Level 3", 25)
To_Hit_Progression <- function(fighter = FALSE){
ProfBonus <- c(rep(2, 4), rep(3, 4), rep(4, 4), rep(5, 4), rep(6, 4))
if(fighter == FALSE){
AS <- c(rep(3, 3), rep(4, 4), rep(5, 13))
}else{
AS <- c(rep(3, 3), rep(4, 2), rep(5, 15))
}
return(AS + ProfBonus)
}
HP_Progression <- function(hitdie){
HP <- c(hitdie)
i <- 1
for (i in 1:19){
HP[i + 1] <- (hitdie * 0.5) + 1 + HP[i]
}
return(HP)
}
Expected_Damage <- function(ddie, nod = 1, samples = 50){
if(nod == 1){
return(rep(floor(ddie * 0.5), samples))
}else{
reps <- c()
for(i in 1:samples){
reps[i] <- sum(sample(1:ddie, nod, replace = TRUE))
}
return(reps)
}
}
Fighter_ToHit_Graph <- function(Archery  = FALSE){
Level <- seq(1, 20, 1)
Bonus <- To_Hit_Progression(fighter = TRUE)
if(Archery){
Bonus <- Bonus + 2
}
ToHitBonus <- data.frame(Level, Bonus)
return(ggplot(ToHitBonus, aes(x = Level, y = Bonus)) + geom_bar(stat = "identity", fill = "burlywood4") + geom_text(aes(label=Bonus), vjust=-0.3, size=3.5) + ggtitle("To-Hit Bonus Progression"))
}
Fighter_HP_Graph <- function(){
Level <- seq(1, 20, 1)
HP <- HP_Progression(10)
for(i in 1:20){
if(i <8){
HP[i] <- HP[i] + 3*i + (5 + i)
}else if(i < 12){
HP[i] <- HP[i] + 4*i + (5 + i)
}else{
HP[i] <- HP[i] + 5*i + (5 + i)
}
}
HP_Prog <- data.frame(Level, HP)
return(ggplot(HP_Prog, aes(x = Level, y = HP)) + geom_bar(stat = "identity", fill = "burlywood4") + geom_text(aes(label=HP), vjust=-0.3, size=3.5) + ggtitle("Fighter HP Progression"))
}
Fighter_HP_DataFrame <- function(){
Level <- seq(1, 20, 1)
HP <- HP_Progression(10)
for(i in 1:20){
if(i <8){
HP[i] <- HP[i] + 3*i + (5 + i)
}else if(i < 12){
HP[i] <- HP[i] + 4*i + (5 + i)
}else{
HP[i] <- HP[i] + 5*i + (5 + i)
}
}
HP_Prog <- data.frame(Level, HP)
}
AttacksThatHitSimulation <- function(ToHit_Bonus, AC, Rounds, ATAA){
Rolls <- c()
for (i in 1:(Rounds*ATAA)){
die <- sample(1:20, 1)
if(die == 20){
Rolls[i] <- "Crit"
}else if(die == 1){
Rolls[i] <- FALSE
}
else{
Rolls[i] <- sum(sample(1:20, 1), ToHit_Bonus) >= AC
}
}
return(Rolls)
}
DamageOnTurn <- function(Attacks, ddie, DBonus){
Damages <- c()
for(i in 1:length(Attacks)){
if (Attacks[i] == "Crit"){
Damages[i] <- (sample(1:ddie, 1) * 2) + DBonus
}else if (Attacks[i]){
Damages[i] <- sample(1:ddie, 1) + DBonus
}else{
Damages[i] <- 0
}
}
return(sum(Damages))
}
Repetitions <- function(To_Validate, Label, repeats){
Temp <- c()
for(i in 1:repeats){
Temp[i] <- eval(parse(text = To_Validate))
}
return(Temp)
}
Repetitions("DamageOnTurn(AttacksThatHitSimulation(6, 14, 5, 1), d10, 0)", "Level 3", 25)
Repetitions("DamageOnTurn(AttacksThatHitSimulation(6, 14, 5, 1), 10, 0)", "Level 3", 25)
To_Hit_Progression <- function(fighter = FALSE){
ProfBonus <- c(rep(2, 4), rep(3, 4), rep(4, 4), rep(5, 4), rep(6, 4))
if(fighter == FALSE){
AS <- c(rep(3, 3), rep(4, 4), rep(5, 13))
}else{
AS <- c(rep(3, 3), rep(4, 2), rep(5, 15))
}
return(AS + ProfBonus)
}
HP_Progression <- function(hitdie){
HP <- c(hitdie)
i <- 1
for (i in 1:19){
HP[i + 1] <- (hitdie * 0.5) + 1 + HP[i]
}
return(HP)
}
Expected_Damage <- function(ddie, nod = 1, samples = 50){
if(nod == 1){
return(rep(floor(ddie * 0.5), samples))
}else{
reps <- c()
for(i in 1:samples){
reps[i] <- sum(sample(1:ddie, nod, replace = TRUE))
}
return(reps)
}
}
Fighter_ToHit_Graph <- function(Archery  = FALSE){
Level <- seq(1, 20, 1)
Bonus <- To_Hit_Progression(fighter = TRUE)
if(Archery){
Bonus <- Bonus + 2
}
ToHitBonus <- data.frame(Level, Bonus)
return(ggplot(ToHitBonus, aes(x = Level, y = Bonus)) + geom_bar(stat = "identity", fill = "burlywood4") + geom_text(aes(label=Bonus), vjust=-0.3, size=3.5) + ggtitle("To-Hit Bonus Progression"))
}
Fighter_HP_Graph <- function(){
Level <- seq(1, 20, 1)
HP <- HP_Progression(10)
for(i in 1:20){
if(i <8){
HP[i] <- HP[i] + 3*i + (5 + i)
}else if(i < 12){
HP[i] <- HP[i] + 4*i + (5 + i)
}else{
HP[i] <- HP[i] + 5*i + (5 + i)
}
}
HP_Prog <- data.frame(Level, HP)
return(ggplot(HP_Prog, aes(x = Level, y = HP)) + geom_bar(stat = "identity", fill = "burlywood4") + geom_text(aes(label=HP), vjust=-0.3, size=3.5) + ggtitle("Fighter HP Progression"))
}
Fighter_HP_DataFrame <- function(){
Level <- seq(1, 20, 1)
HP <- HP_Progression(10)
for(i in 1:20){
if(i <8){
HP[i] <- HP[i] + 3*i + (5 + i)
}else if(i < 12){
HP[i] <- HP[i] + 4*i + (5 + i)
}else{
HP[i] <- HP[i] + 5*i + (5 + i)
}
}
HP_Prog <- data.frame(Level, HP)
}
AttacksThatHitSimulation <- function(ToHit_Bonus, AC, Rounds, ATAA){
Rolls <- c()
for (i in 1:(Rounds*ATAA)){
die <- sample(1:20, 1)
if(die == 20){
Rolls[i] <- "Crit"
}else if(die == 1){
Rolls[i] <- FALSE
}
else{
Rolls[i] <- sum(sample(1:20, 1), ToHit_Bonus) >= AC
}
}
return(Rolls)
}
DamageOnTurn <- function(Attacks, ddie, DBonus){
Damages <- c()
for(i in 1:length(Attacks)){
if (Attacks[i] == "Crit"){
Damages[i] <- (sample(1:ddie, 1) * 2) + DBonus
}else if (Attacks[i]){
Damages[i] <- sample(1:ddie, 1) + DBonus
}else{
Damages[i] <- 0
}
}
return(sum(Damages))
}
Repetitions <- function(To_Validate, Tag, repeats){
Temp <- c()
for(i in 1:repeats){
Temp[i] <- eval(parse(text = To_Validate))
}
Label <- rep(Tag, repeats)
UwU <- data.frame(Label, Temp)
colnames(UwU) <- c("Labels", "Damage")
return(UwU)
}
Repetitions("DamageOnTurn(AttacksThatHitSimulation(6, 14, 5, 1), d10, 0)", "Level 3", 25)
Repetitions("DamageOnTurn(AttacksThatHitSimulation(6, 14, 5, 1), 10, 0)", "Level 3", 25)
To_Hit_Progression <- function(fighter = FALSE){
ProfBonus <- c(rep(2, 4), rep(3, 4), rep(4, 4), rep(5, 4), rep(6, 4))
if(fighter == FALSE){
AS <- c(rep(3, 3), rep(4, 4), rep(5, 13))
}else{
AS <- c(rep(3, 3), rep(4, 2), rep(5, 15))
}
return(AS + ProfBonus)
}
HP_Progression <- function(hitdie){
HP <- c(hitdie)
i <- 1
for (i in 1:19){
HP[i + 1] <- (hitdie * 0.5) + 1 + HP[i]
}
return(HP)
}
Expected_Damage <- function(ddie, nod = 1, samples = 50){
if(nod == 1){
return(rep(floor(ddie * 0.5), samples))
}else{
reps <- c()
for(i in 1:samples){
reps[i] <- sum(sample(1:ddie, nod, replace = TRUE))
}
return(reps)
}
}
Fighter_ToHit_Graph <- function(Archery  = FALSE){
Level <- seq(1, 20, 1)
Bonus <- To_Hit_Progression(fighter = TRUE)
if(Archery){
Bonus <- Bonus + 2
}
ToHitBonus <- data.frame(Level, Bonus)
return(ggplot(ToHitBonus, aes(x = Level, y = Bonus)) + geom_bar(stat = "identity", fill = "burlywood4") + geom_text(aes(label=Bonus), vjust=-0.3, size=3.5) + ggtitle("To-Hit Bonus Progression"))
}
Fighter_HP_Graph <- function(){
Level <- seq(1, 20, 1)
HP <- HP_Progression(10)
for(i in 1:20){
if(i <8){
HP[i] <- HP[i] + 3*i + (5 + i)
}else if(i < 12){
HP[i] <- HP[i] + 4*i + (5 + i)
}else{
HP[i] <- HP[i] + 5*i + (5 + i)
}
}
HP_Prog <- data.frame(Level, HP)
return(ggplot(HP_Prog, aes(x = Level, y = HP)) + geom_bar(stat = "identity", fill = "burlywood4") + geom_text(aes(label=HP), vjust=-0.3, size=3.5) + ggtitle("Fighter HP Progression"))
}
Fighter_HP_DataFrame <- function(){
Level <- seq(1, 20, 1)
HP <- HP_Progression(10)
for(i in 1:20){
if(i <8){
HP[i] <- HP[i] + 3*i + (5 + i)
}else if(i < 12){
HP[i] <- HP[i] + 4*i + (5 + i)
}else{
HP[i] <- HP[i] + 5*i + (5 + i)
}
}
HP_Prog <- data.frame(Level, HP)
}
AttacksThatHitSimulation <- function(ToHit_Bonus, AC, Rounds, ATAA){
Rolls <- c()
for (i in 1:(Rounds*ATAA)){
die <- sample(1:20, 1)
if(die == 20){
Rolls[i] <- "Crit"
}else if(die == 1){
Rolls[i] <- FALSE
}
else{
Rolls[i] <- sum(sample(1:20, 1), ToHit_Bonus) >= AC
}
}
return(Rolls)
}
DamageOnTurn <- function(Attacks, ddie, DBonus){
Damages <- c()
for(i in 1:length(Attacks)){
if (Attacks[i] == "Crit"){
Damages[i] <- (sample(1:ddie, 1) * 2) + DBonus
}else if (Attacks[i]){
Damages[i] <- sample(1:ddie, 1) + DBonus
}else{
Damages[i] <- 0
}
}
return(sum(Damages))
}
Repetitions <- function(To_Validate, Tag, AttackName, repeats){
Temp <- c()
for(i in 1:repeats){
Temp[i] <- eval(parse(text = To_Validate))
}
Label <- rep(Tag, repeats)
UwU <- data.frame(Label, Temp)
colnames(UwU) <- c("Labels", AttackName)
return(UwU)
}
Repetitions("DamageOnTurn(AttacksThatHitSimulation(6, 14, 5, 1), 10, 0)", "Level 3", "Firebolt", 25)
knitr::opts_chunk$set(echo = TRUE)
ATFv2 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY.txt", header = T)
setwd("C:/Users/ese_1/OneDrive/Documentos/CoRa/")
ATFv2 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY.txt", header = T)
ATFv2_71 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_71.txt", header = T)
ATFv2_109 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_109.txt", header = T)
ATFv2_285 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_285.txt", header = T)
ATFv2_373 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_373.txt", header = T)
ATFv2_426 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_426.txt", header = T)
ATFv2_503 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_503.txt", header = T)
ATFv2_625 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_625.txt", header = T)
ATFv2_664 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_664.txt", header = T)
ATFv2_719 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_719.txt", header = T)
ATFv2_856 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_856.txt", header = T)
ATFv2_859 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_859.txt", header = T)
ATFv2_904 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_904.txt", header = T)
ATFv2_936 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_936.txt", header = T)
ATFv2_947 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_947.txt", header = T)
ATFv2_979 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_979.txt", header = T)
ATFv2_982 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_982.txt", header = T)
ATFv2_1004 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_1004.txt", header = T)
ATFv2_1182 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_1182.txt", header = T)
ATFv2_Merged <- rbind(ATFv2, ATFv2_71, ATFv2_109, ATFv2_285, ATFv2_373, ATFv2_426, ATFv2_503, ATFv2_625, ATFv2_664, ATFv2_719, ATFv2_856, ATFv2_859, ATFv2_904, ATFv2_936, ATFv2_947, ATFv2_979, ATFv2_982, ATFv2_1004, ATFv2_1182)
BNFv2 <- read.table(file = "OUT_ExSSs_BNFv2_1250Set1_mY_mY.txt", header = T)
rm(ATFv2, ATFv2_71, ATFv2_109, ATFv2_285, ATFv2_373, ATFv2_426, ATFv2_503, ATFv2_625, ATFv2_664, ATFv2_719, ATFv2_856, ATFv2_859, ATFv2_904, ATFv2_936, ATFv2_947, ATFv2_979, ATFv2_982, ATFv2_1004, ATFv2_1182)
ATFv2_Names <- paste0("ATFv2_", 1:nrow(ATFv2_Merged))
BNFv2_Names <- paste0("BNFv2_", 1:nrow(BNFv2))
CoRas <- as.data.frame(t(rbind(ATFv2_Merged[, 2:ncol(ATFv2_Merged)], BNFv2[, 2:ncol(BNFv2)])))
CoRas[CoRas > 1] <- NaN
colnames(CoRas) <- c(ATFv2_Names, BNFv2_Names)
rm(ATFv2_Merged, BNFv2, ATFv2_Names, BNFv2_Names)
setwd("C:/Users/ese_1/OneDrive/Documentos/CoRa/")
ATFv2 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY.txt", header = T)
ATFv2_71 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_71.txt", header = T)
ATFv2_109 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_109.txt", header = T)
ATFv2_285 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_285.txt", header = T)
ATFv2_373 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_373.txt", header = T)
ATFv2_426 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_426.txt", header = T)
ATFv2_503 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_503.txt", header = T)
ATFv2_625 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_625.txt", header = T)
ATFv2_664 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_664.txt", header = T)
ATFv2_719 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_719.txt", header = T)
ATFv2_856 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_856.txt", header = T)
ATFv2_859 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_859.txt", header = T)
ATFv2_904 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_904.txt", header = T)
ATFv2_936 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_936.txt", header = T)
ATFv2_947 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_947.txt", header = T)
ATFv2_979 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_979.txt", header = T)
ATFv2_982 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_982.txt", header = T)
ATFv2_1004 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_1004.txt", header = T)
ATFv2_1182 <- read.table(file = "OUT_ExSSs_ATFv2_1250Set1_mY_mY_From_1182.txt", header = T)
ATFv2_Merged <- rbind(ATFv2, ATFv2_71, ATFv2_109, ATFv2_285, ATFv2_373, ATFv2_426, ATFv2_503, ATFv2_625, ATFv2_664, ATFv2_719, ATFv2_856, ATFv2_859, ATFv2_904, ATFv2_936, ATFv2_947, ATFv2_979, ATFv2_982, ATFv2_1004, ATFv2_1182)
BNFv2 <- read.table(file = "OUT_ExSSs_BNFv2_1250Set1_mY_mY.txt", header = T)
rm(ATFv2, ATFv2_71, ATFv2_109, ATFv2_285, ATFv2_373, ATFv2_426, ATFv2_503, ATFv2_625, ATFv2_664, ATFv2_719, ATFv2_856, ATFv2_859, ATFv2_904, ATFv2_936, ATFv2_947, ATFv2_979, ATFv2_982, ATFv2_1004, ATFv2_1182)
ATFv2_Names <- paste0("ATFv2_", 1:nrow(ATFv2_Merged))
BNFv2_Names <- paste0("BNFv2_", 1:nrow(BNFv2))
CoRas <- as.data.frame(t(rbind(ATFv2_Merged[, 2:ncol(ATFv2_Merged)], BNFv2[, 2:ncol(BNFv2)])))
CoRas[CoRas > 1] <- NaN
colnames(CoRas) <- c(ATFv2_Names, BNFv2_Names)
rm(ATFv2_Merged, BNFv2, ATFv2_Names, BNFv2_Names)
View(CoRas)
View(CoRas)
